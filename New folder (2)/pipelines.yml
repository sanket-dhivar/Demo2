

# trigger:
# - master

pool:
- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'
  vmImage: 'ubuntu-latest'

variables:
  subscription: Visual Studio Enterprise(690b950d-5162-4bbd-af2d-945889d8a9ad)
  resourceGroup: KE-DevOps-LandingZone
  storageAccount: testwesteurope123
  container: test-dev
  tfstateFile: terraform.tfstate
<<<<<<< HEAD
=======
- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/New folder'
    backendServiceArm: 'test-devops'
    backendAzureRmResourceGroupName: 'KE-DevOps-LandingZone'
    backendAzureRmStorageAccountName: 'testwesteurope123'
    backendAzureRmContainerName: 'test-dev'
    backendAzureRmKey: 'RgvUgw78ISrE3tzFSvPRqmtfUEfbnR7d6nRXnIhgw6GbEK92616z93NkyL9OcHxqWIbrSzGNZoda+ASthYh2KQ=='
- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'
>>>>>>> 28c13f55f4101a96db597ebdbe0e0bd3e866565a
  anyTfChanges: false

steps:

- task: TerraformInstaller@0
  displayName: install Terraform v0.12.28
  inputs:
    terraformVersion: '1.4.6'
<<<<<<< HEAD

- task: TerraformTaskV1@0
  displayName: terraform init
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/New folder'
    backendServiceArm: '$(subscription)'
    backendAzureRmResourceGroupName: '$(resourceGroup)'
    backendAzureRmStorageAccountName: '$(storageAccount)'
    backendAzureRmContainerName: '$(container)'
    backendAzureRmKey: '$(tfstateFile)'

- task: TerraformTaskV1@0
  displayName: terraform plan -out=tfplan
=======
- task: TerraformTaskV4@4
>>>>>>> 28c13f55f4101a96db597ebdbe0e0bd3e866565a
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/New folder'
    environmentServiceNameAzureRM: 'test-devops'

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'apply'
    environmentServiceNameAzureRM: 'test-devops'

- task: PowerShell@2
  displayName: detect any terraform change
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    targetType: 'inline'
    script: |
      # Write-Host "LASTEXITCODE : $LASTEXITCODE"
      $plan = $(terraform show -json tfplan | ConvertFrom-Json)
      $actions = $plan.resource_changes.change.actions
      Write-Host "Terraform actions : $actions"
      if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
      {
        Write-Host "Terraform will perform the following actions : $actions"
        Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
      }
      else
      {
        Write-Host "There is no change detected in Terraform tfplan file"
      }
<<<<<<< HEAD
- task: TerraformTaskV1@0
  displayName: terraform apply tfplan
  condition: eq(variables.anyTfChanges, true)
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/skip-step'
    commandOptions: 'tfplan'
    environmentServiceNameAzureRM: '$(subscription)'
=======
>>>>>>> 28c13f55f4101a96db597ebdbe0e0bd3e866565a
